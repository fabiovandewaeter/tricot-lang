// cascade
/*
let d = 1
    <- add(1)
    <- add(1)
    <- yourself
*/

// pipeline
/*
let player =
  Entity()
  |> add(Position(10, 5))
  |> add(Health(100, 100))
  |> yourself
*/

/*
fn incr(a: &mut Int) {
    *a += 1
}
let mut a = 1
incr(&mut a)
print(a)
*/

comp Position(x: Int, y: Int)
comp Velocity(dx: Int, dy: Int)
comp Health(Int)

res Time(Int)

// implicit loop, parameters are outside (and just one query)
sys move_entities(position: mut Position, velocity: Velocity) using (time: Time) {
    position.x += velocity.dx
    position.y += velocity.dy
}

schedule {
    physics_update
    health_system
}
