comp Position(x: Int, y: Int)
comp Velocity(dx: Int, dy: Int)
comp Health(Int)

res Time(Int)

// implicit loop, parameters are outside (and just one query)
sys move_entities(position: mut Position, velocity: Velocity) using (time:Time) {
    position.x += velocity.dx
    position.y += velocity.dy
}

// explicit loop with mutiple queries
sys physics_update using (t: Time) {
    with (Player, mut Position, Collider) as player,
         (Enemy, Position, Collider) as enemy {
        
        if player.Collider.intersects(enemy.Collider) {
            player.Health.damage(10)
        }
    }
}

// can specify that the system is sequential
seq sys health_system {
    with (mut Health, Damage, ?Type) as query where Health > 0 {
        Health -= Damage.amount
    }
}

// can specify whether a sub-part is sequential or parallel
sys producer_consumer {
    // parallel
    par with (mut Source) => generate_items()
    
    // sequential
    seq {
        let batch = Buffer.drain()
        TargetQueue.push(batch)
    }
    
    // parallel too
    with (mut Consumer) => process_items()
}

// entity spawning
sys entity_spawner() {
    let id = spawn {
        Position(0, 0),
        Velocity(1, 1)
    }
}

// on trigger
sys print_something() on (PrintTrigger) {
    print("print_something()")
}

schedule {
    entity_spawner,
    physics_update,
    health_system
}
